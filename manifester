#!/bin/sh
exec scala "$0" "$@"
!#

import
  java.{ io, nio },
    io.{ File, FilenameFilter },
    nio.file.Files

import
  scala.sys.process.Process

implicit class SuperFile(file: File) {
  def deleteRecursively(): Unit = {
    def helper(f: File): Unit =
      Option(f) foreach {
        inner =>
          Option(inner.listFiles) getOrElse Array() foreach helper
          inner.delete()
      }
    helper(file)
  }
}

val args = argv.toSeq

if (args.length != 2)
  throw new Exception("Need 2 args: filePath, manifestPath")

val Seq(filePath, manifestPath) = args

val fileFilter = new FilenameFilter {
  override def accept(dir: File, name: String) = name.toLowerCase.endsWith(".jar")
}

val file     = new File(filePath)
val manifest = new File(manifestPath)

def shell(cmd: String)(implicit context: File = new File(System.getProperty("user.home"))): String = Process(cmd, context).!!

def updateOne(file: File): Unit = {

  implicit val context = Files.createTempDirectory(null).toFile

  val jarPath  = file.getAbsolutePath

  shell(s"jar -xf $jarPath")
  shell(s"rm $jarPath")

  val filesStr = context.listFiles().toSeq map (_.getAbsolutePath drop (context.getAbsolutePath.length + 1)) filter (_ != "META-INF") mkString " "

  shell(s"jar -cfm $jarPath ${manifest.getAbsolutePath} $filesStr")

  context.deleteRecursively()

}

if (file.isDirectory)
  file listFiles fileFilter foreach updateOne
else
  updateOne(file)
